[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Salim\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Salim\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 19.0.1)
[debug]       Load.loadUnit: plugins took 166.156099ms
[debug]       Load.loadUnit: defsScala took 0.3313ms
[debug] [Loading] Scanning directory C:\Users\Salim\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Salim\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.054901 ms
[debug]           Load.resolveProject(global-plugins) took 56.256ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Salim\.sbt\1.0\plugins, plugins: List(<none>))) took 111.0016ms
[debug] [Loading] Done in C:\Users\Salim\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 145.3878ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3745ms
[debug]     Load.loadUnit(file:/C:/Users/Salim/.sbt/1.0/plugins/, ...) took 327.0295ms
[debug]   Load.apply: load took 685.223399ms
[debug]   Load.apply: resolveProjects took 7.8502ms
[debug]   Load.apply: finalTransforms took 100.1979ms
[debug]   Load.apply: config.delegates took 12.883301ms
[debug]   Load.apply: Def.make(settings)... took 746.833ms
[debug]   Load.apply: structureIndex took 200.9818ms
[debug]   Load.apply: mkStreams took 2.5292ms
[info] loading global plugins from C:\Users\Salim\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4304.1071ms
[debug]           Load.loadUnit: plugins took 36.837699ms
[debug]           Load.loadUnit: defsScala took 0.006599ms
[debug] [Loading] Scanning directory C:\Users\Salim\IdeaProjects\CRDTCounter\project
[debug]             Load.loadUnit: mkEval took 8.7357ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6623 ms
[info] loading settings for project crdtcounter-build from idea.sbt ...
[debug]               Load.resolveProject(crdtcounter-build) took 3.1377ms
[debug]             Load.loadTransitive: finalizeProject(Project(id crdtcounter-build, base: C:\Users\Salim\IdeaProjects\CRDTCounter\project, plugins: List(<none>))) took 6.5831ms
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter\project, returning: (crdtcounter-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 210.9388ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.8059ms
[debug]         Load.loadUnit(file:/C:/Users/Salim/IdeaProjects/CRDTCounter/project/, ...) took 254.8277ms
[debug]       Load.apply: load took 256.7713ms
[debug]       Load.apply: resolveProjects took 0.147599ms
[debug]       Load.apply: finalTransforms took 11.852099ms
[debug]       Load.apply: config.delegates took 0.4356ms
[debug]       Load.apply: Def.make(settings)... took 96.3665ms
[debug]       Load.apply: structureIndex took 33.699301ms
[debug]       Load.apply: mkStreams took 0.0021ms
[info] loading project definition from C:\Users\Salim\IdeaProjects\CRDTCounter\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1928.9356ms
[debug]     Load.loadUnit: defsScala took 0.003299ms
[debug] [Loading] Scanning directory C:\Users\Salim\IdeaProjects\CRDTCounter
[debug]       Load.loadUnit: mkEval took 0.5994ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.8044 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 34.4321ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Salim\IdeaProjects\CRDTCounter, plugins: List(<none>))) took 40.0777ms
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4820.6897ms
[debug]     Load.loadUnit: cleanEvalClasses took 38.921399ms
[debug]   Load.loadUnit(file:/C:/Users/Salim/IdeaProjects/CRDTCounter/, ...) took 6789.697701ms
[debug] Load.apply: load took 6791.9998ms
[debug] Load.apply: resolveProjects took 0.1001ms
[debug] Load.apply: finalTransforms took 34.979101ms
[debug] Load.apply: config.delegates took 0.267199ms
[debug] Load.apply: Def.make(settings)... took 99.0377ms
[debug] Load.apply: structureIndex took 33.495699ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to CRDTCounter (in build file:/C:/Users/Salim/IdeaProjects/CRDTCounter/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64462 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64462, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CRDTCounter (in build file:/C:/Users/Salim/IdeaProjects/CRDTCounter/)
[debug] > Exec(idea-shell, None, None)
