[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Salim\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Salim\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 19.0.1)
[debug]       Load.loadUnit: plugins took 184.560001ms
[debug]       Load.loadUnit: defsScala took 0.3943ms
[debug] [Loading] Scanning directory C:\Users\Salim\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Salim\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 30.463399 ms
[debug]           Load.resolveProject(global-plugins) took 116.237301ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Salim\.sbt\1.0\plugins, plugins: List(<none>))) took 178.2057ms
[debug] [Loading] Done in C:\Users\Salim\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 210.198401ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3655ms
[debug]     Load.loadUnit(file:/C:/Users/Salim/.sbt/1.0/plugins/, ...) took 412.073901ms
[debug]   Load.apply: load took 709.4807ms
[debug]   Load.apply: resolveProjects took 10.7422ms
[debug]   Load.apply: finalTransforms took 128.349001ms
[debug]   Load.apply: config.delegates took 12.5147ms
[debug]   Load.apply: Def.make(settings)... took 835.886ms
[debug]   Load.apply: structureIndex took 171.7447ms
[debug]   Load.apply: mkStreams took 3.6461ms
[info] loading global plugins from C:\Users\Salim\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4317.7365ms
[debug]           Load.loadUnit: plugins took 28.688301ms
[debug]           Load.loadUnit: defsScala took 0.0066ms
[debug] [Loading] Scanning directory C:\Users\Salim\IdeaProjects\CRDTCounter\project
[debug]             Load.loadUnit: mkEval took 5.0563ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.9578 ms
[info] loading settings for project crdtcounter-build from idea.sbt ...
[debug]               Load.resolveProject(crdtcounter-build) took 3.4324ms
[debug]             Load.loadTransitive: finalizeProject(Project(id crdtcounter-build, base: C:\Users\Salim\IdeaProjects\CRDTCounter\project, plugins: List(<none>))) took 7.144401ms
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter\project, returning: (crdtcounter-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 163.599ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.376201ms
[debug]         Load.loadUnit(file:/C:/Users/Salim/IdeaProjects/CRDTCounter/project/, ...) took 199.7077ms
[debug]       Load.apply: load took 201.923899ms
[debug]       Load.apply: resolveProjects took 0.114601ms
[debug]       Load.apply: finalTransforms took 14.2538ms
[debug]       Load.apply: config.delegates took 0.623699ms
[debug]       Load.apply: Def.make(settings)... took 141.5545ms
[debug]       Load.apply: structureIndex took 48.346001ms
[debug]       Load.apply: mkStreams took 0.002601ms
[info] loading project definition from C:\Users\Salim\IdeaProjects\CRDTCounter\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 876.5062ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\Salim\IdeaProjects\CRDTCounter
[debug]       Load.loadUnit: mkEval took 0.5637ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.9063 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 46.5538ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Salim\IdeaProjects\CRDTCounter, plugins: List(<none>))) took 52.8019ms
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 155.476201ms
[debug]     Load.loadUnit: cleanEvalClasses took 17.405701ms
[debug]   Load.loadUnit(file:/C:/Users/Salim/IdeaProjects/CRDTCounter/, ...) took 1050.4046ms
[debug] Load.apply: load took 1052.6553ms
[debug] Load.apply: resolveProjects took 0.2277ms
[debug] Load.apply: finalTransforms took 44.169899ms
[debug] Load.apply: config.delegates took 0.583199ms
[debug] Load.apply: Def.make(settings)... took 135.2815ms
[debug] Load.apply: structureIndex took 46.3394ms
[debug] Load.apply: mkStreams took 0.002599ms
[info] set current project to CRDTCounter (in build file:/C:/Users/Salim/IdeaProjects/CRDTCounter/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59944 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59944, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CRDTCounter (in build file:/C:/Users/Salim/IdeaProjects/CRDTCounter/)
[debug] > Exec(idea-shell, None, None)
