[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Salim\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Salim\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 19.0.1)
[debug]       Load.loadUnit: plugins took 130.3648ms
[debug]       Load.loadUnit: defsScala took 0.6134ms
[debug] [Loading] Scanning directory C:\Users\Salim\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Salim\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 31.7582 ms
[debug]           Load.resolveProject(global-plugins) took 66.5249ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Salim\.sbt\1.0\plugins, plugins: List(<none>))) took 137.728601ms
[debug] [Loading] Done in C:\Users\Salim\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 175.29ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3236ms
[debug]     Load.loadUnit(file:/C:/Users/Salim/.sbt/1.0/plugins/, ...) took 324.586299ms
[debug]   Load.apply: load took 605.4056ms
[debug]   Load.apply: resolveProjects took 8.3865ms
[debug]   Load.apply: finalTransforms took 99.9054ms
[debug]   Load.apply: config.delegates took 13.4607ms
[debug]   Load.apply: Def.make(settings)... took 646.7985ms
[debug]   Load.apply: structureIndex took 171.5817ms
[debug]   Load.apply: mkStreams took 2.0361ms
[info] loading global plugins from C:\Users\Salim\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4091.691001ms
[debug]           Load.loadUnit: plugins took 35.6382ms
[debug]           Load.loadUnit: defsScala took 0.0057ms
[debug] [Loading] Scanning directory C:\Users\Salim\IdeaProjects\CRDTCounter\project
[debug]             Load.loadUnit: mkEval took 11.329101ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.608101 ms
[info] loading settings for project crdtcounter-build from idea.sbt ...
[debug]               Load.resolveProject(crdtcounter-build) took 5.0521ms
[debug]             Load.loadTransitive: finalizeProject(Project(id crdtcounter-build, base: C:\Users\Salim\IdeaProjects\CRDTCounter\project, plugins: List(<none>))) took 8.332ms
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter\project, returning: (crdtcounter-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4638.5487ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.7198ms
[debug]         Load.loadUnit(file:/C:/Users/Salim/IdeaProjects/CRDTCounter/project/, ...) took 4683.2491ms
[debug]       Load.apply: load took 4685.434001ms
[debug]       Load.apply: resolveProjects took 0.121001ms
[debug]       Load.apply: finalTransforms took 16.268001ms
[debug]       Load.apply: config.delegates took 1.1037ms
[debug]       Load.apply: Def.make(settings)... took 148.446301ms
[debug]       Load.apply: structureIndex took 43.754599ms
[debug]       Load.apply: mkStreams took 0.0022ms
[info] loading project definition from C:\Users\Salim\IdeaProjects\CRDTCounter\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6986.194599ms
[debug]     Load.loadUnit: defsScala took 0.0038ms
[debug] [Loading] Scanning directory C:\Users\Salim\IdeaProjects\CRDTCounter
[debug]       Load.loadUnit: mkEval took 0.78ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 17.0131 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 51.0432ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Salim\IdeaProjects\CRDTCounter, plugins: List(<none>))) took 71.098501ms
[debug] [Loading] Done in C:\Users\Salim\IdeaProjects\CRDTCounter, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3582.7773ms
[debug]     Load.loadUnit: cleanEvalClasses took 28.4065ms
[debug]   Load.loadUnit(file:/C:/Users/Salim/IdeaProjects/CRDTCounter/, ...) took 10599.2689ms
[debug] Load.apply: load took 10602.4764ms
[debug] Load.apply: resolveProjects took 0.176801ms
[debug] Load.apply: finalTransforms took 29.2258ms
[debug] Load.apply: config.delegates took 0.4491ms
[debug] Load.apply: Def.make(settings)... took 124.6075ms
[debug] Load.apply: structureIndex took 55.4334ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to CRDTCounter (in build file:/C:/Users/Salim/IdeaProjects/CRDTCounter/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59700 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59700, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CRDTCounter (in build file:/C:/Users/Salim/IdeaProjects/CRDTCounter/)
[debug] > Exec(idea-shell, None, None)
